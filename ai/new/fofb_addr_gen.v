// -------------------------------------------------------------
//
// File Name: hdlsrc\fofb_addr_gen.v
// Created: 2012-11-23 17:19:32
// Generated by MATLAB 7.6 and Simulink HDL Coder 1.3
//
//
// -------------------------------------------------------------


`timescale 1 ns / 1 ns
//`define	MAX_COUNT	400
`define	MAX_COUNT	1024      //7/03/13


module fofb_addr_gen
          (
           clk,
           reset,
		   trig,
           clk_enable,
           Gain,
           address_move,
           AddressStart,
           AddressEnd,
           ce_out,
           Data16b,
           Data32b,
           addr,
           wr_one,
           wr
          );


  input   clk;
  input   reset;
  input   trig;	
  input   clk_enable;
  input   [15:0] Gain;  // uint16
  input   [11:0] address_move;  // ufix12
  input   [11:0] AddressStart;  // ufix12
  input   [11:0] AddressEnd;  // ufix12
  output  ce_out;
  output  signed [15:0] Data16b;  // int16
  output  signed [31:0] Data32b;  // int32
  output  [11:0] addr;  // ufix12
  output  wr_one;
  output  wr;


  wire enb;
  wire enb_1_1_1;
  reg [11:0] Counter_Free_Running_out1;  // ufix12
  wire signed [15:0] Product_out1;  // int16
  wire signed [15:0] ToFixPt_out1;  // int16
  wire signed [31:0] ToHost_out1;  // int32
  wire Relational_Operator2_out1;
  wire Relational_Operator1_out1;
  wire Relational_Operator3_out1;
  wire Logical_Operator2_out1;
  wire [27:0] mul_temp;  // ufix28
  wire signed [15:0] ToHost_tmp;  // int16

  assign enb_1_1_1 = clk_enable;
  assign ce_out = enb_1_1_1;
  always @ (posedge clk or posedge reset)
    begin: Counter_Free_Running_process
      if (reset == 1'b1 | trig == 1'b1) begin
        Counter_Free_Running_out1 <= 12'b000000000000;
      end
      else begin
        if (enb == 1'b1) begin
          //if (Counter_Free_Running_out1 == 12'b111111111111) begin
          //  Counter_Free_Running_out1 <= 12'b000000000000;
          //end
          if (Counter_Free_Running_out1 >= 12'd`MAX_COUNT) begin
            Counter_Free_Running_out1 <= Counter_Free_Running_out1;  
          end          
          else begin
            Counter_Free_Running_out1 <= Counter_Free_Running_out1 + 1;
          end
        end
      end
    end // Counter_Free_Running_process

  assign mul_temp = Gain * Counter_Free_Running_out1;
  assign Product_out1 = $signed($signed(mul_temp[15:0]));

  assign ToFixPt_out1 = Product_out1;

  assign Data16b = ToFixPt_out1;
  assign ToHost_tmp = ToFixPt_out1;

  assign ToHost_out1 = $signed({{16{ToHost_tmp[15]}}, ToHost_tmp});

  assign Data32b = ToHost_out1;
  assign addr = Counter_Free_Running_out1;
  assign Relational_Operator2_out1 = (Counter_Free_Running_out1 == address_move) ? 1'b1 : 1'b0;

  assign wr_one = Relational_Operator2_out1;
  assign Relational_Operator1_out1 = (Counter_Free_Running_out1 >= AddressStart) ? 1'b1 : 1'b0;

  assign Relational_Operator3_out1 = (Counter_Free_Running_out1 <= AddressEnd) ? 1'b1 : 1'b0;

  assign Logical_Operator2_out1 =  Relational_Operator1_out1 & Relational_Operator3_out1 & ~reset;

  assign wr = Logical_Operator2_out1;
  assign enb = clk_enable;

endmodule  // fofb_addr_gen

